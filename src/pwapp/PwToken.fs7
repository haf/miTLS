(*
 * Copyright (c) 2012--2014 MSR-INRIA Joint Center. All rights reserved.
 * 
 * This code is distributed under the terms for the CeCILL-B (version 1)
 * license.
 * 
 * You should have received a copy of the CeCILL-B (version 1) license
 * along with this program.  If not, see:
 * 
 *   http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt
 *)

module PwToken

// ------------------------------------------------------------------------
open Bytes
open TLSInfo
open DataStream
open Range

// ------------------------------------------------------------------------
type username = string

type token =
  | GToken of bytes
  | BToken of bytes

private type utk = UTK of username * token

predicate GoodClient      of unit
predicate GoodToken       of token
predicate RegisteredToken of utk

assume !bs.     GoodToken(GToken(bs))
assume !bs. not GoodToken(BToken(bs))

private val tokens : (utk:utk{RegisteredToken(utk)}) list ref

function val TokenBytes : token -> bytes

definition !bs. TokenBytes(GToken(bs)) = bs
definition !bs. TokenBytes(BToken(bs)) = bs

// ------------------------------------------------------------------------
private val verify_r :
     utk:utk
  -> tokens:(utk:utk{RegisteredToken(utk)}) list
  -> b:bool{b = true => RegisteredToken(utk)}

// ------------------------------------------------------------------------
val create   : unit{GoodClient()} -> tk:token{GoodToken(tk)}
val register : u:username -> tk:token{GoodToken(tk)} -> unit{RegisteredToken(UTK(u, tk))}
val verify   : u:username -> tk:token -> b:bool{b = true => RegisteredToken(UTK(u, tk))}
val guess    : bytes -> tk:token{not GoodToken(tk)}

// ------------------------------------------------------------------------
private val tk_good  : tk:token -> b:bool{b = true => GoodToken(tk)}
private val tk_bytes : tk:token -> bs:bytes{bs = TokenBytes(tk)}

// ------------------------------------------------------------------------
type (;ki : epoch, s : (;ki)stream, r : range) delta = (;ki, s, r) DataStream.delta

private val MaxTkReprLen : nat

// ------------------------------------------------------------------------
val tk_repr :
     ki : epoch
  -> s  : (;ki) stream{s=EmptyStream(ki)}
  -> u  : username
  -> tk : token

  -> (;ki, s, (0, MaxTkReprLen)) delta

val tk_plain :
     ki : epoch
  -> s  : (;ki) stream
  -> r  : range
  -> d  : (;ki, s, r) delta

  -> (username * token) option

// ------------------------------------------------------------------------
val rp_repr :
     ki : epoch
  -> s  : (;ki)stream
  -> b  : bool

  -> (;ki, s, (0, MaxTkReprLen)) delta

val rp_plain :
     ki : epoch
  -> s  : (;ki) stream
  -> r  : range
  -> d  : (;ki, s, r) delta

  -> bool
