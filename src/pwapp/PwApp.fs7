(*
 * Copyright (c) 2012--2014 MSR-INRIA Joint Center. All rights reserved.
 * 
 * This code is distributed under the terms for the CeCILL-B (version 1)
 * license.
 * 
 * You should have received a copy of the CeCILL-B (version 1) license
 * along with this program.  If not, see:
 * 
 *   http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt
 *)

module PwApp

open Cert
open Dispatch
open TLSInfo
open PwToken

type username = PwToken.username

predicate ClientAuthenticated   of username * token
predicate AuthenticatedByServer of SessionInfo  * username

function val CN : Cert.cert list -> string

val request :
      servname : string
   -> username : string
   -> token    : token{RegisteredToken(UTK(username, token))}
   -> (c:Connection{
		CN(EpochSI(CnInfo(c).id_in).serverID) = username /\
		( StrongAuth(CnInfo(c).id_in) /\
		  ( RSAKey.Honest(RSAPKCert(EpochSI(CnInfo(c).id_in).serverID)) \/
			Sig.Honest(SigPKCert(EpochSI(CnInfo(c).id_in).serverID))
		  ) =>
			AuthenticatedByServer(EpochSI(CnInfo(c).id_in), username)
		)
      }) option

val response : string -> (uc:(username * Connection){
  !c, u. (u, c) = uc =>
    ?token. StrongAuth(CnInfo(c).id_in)
	          => ClientAuthenticated(u, token) /\ GoodToken(u, token)
}) option
