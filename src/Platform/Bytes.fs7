(*
 * Copyright (c) 2012--2013 MSR-INRIA Joint Center. All rights reserved.
 * 
 * This code is distributed under the terms for the CeCILL-B (version 1)
 * license.
 * 
 * You should have received a copy of the CeCILL-B (version 1) license
 * along with this program.  If not, see:
 * 
 *   http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt
 *)

module Bytes

(* Binary representations, using variable-length byte arrays *)
(* This module implementation is trusted, not verified *)

type nat = n:int {0 <= n} // a convenient abbreviation
type cbytes = byte array
type bytes
function val B: bytes -> byte array
val empty_bytes: (b:bytes){B(b) = [||]}
val abytes: b:byte array -> a:bytes{B(a) = b}
val abyte: b:byte -> a:bytes{B(a) = [| b |]}
val abyte2: b:(byte*byte) -> a:bytes{!b1,b2. b = (b1,b2) => B(a) = [| b1;b2 |]}

val cbytes: a:bytes -> b:byte array{B(a) = b}
val cbyte: a:bytes -> b:byte{B(a) = [| b |]}
val cbyte2: a:bytes -> (b1:byte*b2:byte){B(a) = [| b1;b2 |]}

(* Lengths for arrays and lists *)

function val BLength: byte array -> int
function val Length: bytes -> int
// lengths distribute over concatenations
assume !x, y. BLength(x @| y) = BLength(x) + BLength(y)
assume !x. Length(x) = BLength(B(x))
val length: b:bytes -> l:nat {Length(b) = l}

type (;l:nat) lbytes = b:bytes {Length(b) = l}

val createBytes: l:int -> v:int { 0 <= v /\ v < 256 } -> (;l) lbytes

val equalBytes: b0:bytes -> b1:bytes ->
  r:bool {(r = true /\ B(b0) = B(b1)) \/ (r = false /\ B(b0) <> B(b1))}
val xor: b0:bytes -> b1:bytes -> nb:nat -> b3:bytes{Length(b3) = nb}

(* Array concatenation (append) *)
(* we use the infix operator @| both concretely and in formulas *)

val op_AtBar: b1:bytes -> b2:bytes -> b:bytes{B(b) = B(b1) @| B(b2)}

val split:
  b:bytes -> i:nat{Length(b) >= i} ->
  b1:bytes * b2:bytes { Length(b1) = i /\ B(b) = B(b1) @| B(b2) }

val split2: b:bytes -> i:nat -> j:nat  {Length(b) >= i+j} ->
  b1:bytes * b2:bytes * b3:bytes { Length(b1)=i /\ Length(b2)=j /\
      B(b) = B(b1) @| B(b2) @| B(b3)}

// empty array is an identity for append
// assume !x. empty_bytes @| x = x
assume !x. x @| [||] = x

// append is injective when using fixed lengths.
assume !b1,b2,c1,c2.
  (b1 @| b2 = c1 @| c2 /\ BLength(b1)=BLength(c1)) => (b1=c1 /\ b2=c2)

assume !b1,b2,c1,c2.
  (b1 @| b2 = c1 @| c2 /\ BLength(b2)=BLength(c2)) => (b1=c1 /\ b2=c2)

// append is associative
assume !b1,b2,b3. (b1 @| b2) @| b3 = b1 @| (b2 @| b3)

(* integer multi-byte representations *)

function val IntBytes: int * int -> bytes

val bytes_of_int: l:int -> i:int -> b:bytes{b = IntBytes(l,i)}
val int_of_bytes: b:bytes {Length(b)<=8} -> i:nat
  {b = IntBytes(Length(b),i) /\ (Length(b) = 1 => (0 <= i /\ i < 256)) }

// the first argument is the length of the representation
assume !l:int, i:int. Length(IntBytes(l,i)) = l
// the representation is injective
assume !l:int, i0:int, i1:int. IntBytes(l,i0) = IntBytes(l,i1) => i0=i1

(* string representation, used in sample apps *)

function val Utf8: string -> bytes
val utf8:  s:string -> b:bytes { b = Utf8(s) }
val iutf8: b:bytes -> s:string { b = Utf8(s) }

// utf8 is injective
assume !x:string, y:string. ( Utf8(x)=Utf8(y) => x = y )

(* for logical debugging only *)

val todo: string -> unit { false }
