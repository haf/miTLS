(*
 * Copyright (c) 2012--2013 MSR-INRIA Joint Center. All rights reserved.
 * 
 * This code is distributed under the terms for the CeCILL-B (version 1)
 * license.
 * 
 * You should have received a copy of the CeCILL-B (version 1) license
 * along with this program.  If not, see:
 * 
 *   http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt
 *)

module AppFragment
open Bytes
open TLSInfo
open Range
open DataStream

(* Application fragments are defined from DataStream as triples (e,s,d)
   where e is an epoch, s is a stream, and d is a delta indexed by them.
   We also set up predicates & functions to re-index with/without e & s. *)

predicate DeltaFragment of e:epoch * s:(;e) stream * r:range * (;e,s,r)delta

private type (;i:id,r:range) fragment =
  {frag: (e:epoch * s:(;e)stream * d:(;e,s,r) delta{ i = Id(e) /\
              (Auth(e) => DeltaFragment(e,s,r,d))}) }

predicate Sent of e:epoch * (;e) stream * r:range * (;Id(e),r)fragment
private definition !e,s,r,f. Sent(e,s,r,f) <=>
  (?d,r. f.frag = (e,s,d) /\ DeltaFragment(e,s,r,d))

ask !e,s,r,f. Sent(e,s,r,f) => (?d. f.frag = (e,s,d))

type (;e:epoch,s:(;e)stream,r:range) plain = f:(;Id(e),r) fragment{Auth(e) => Sent(e,s,r,f)}

function val Payload: i:id * r:range * (;i,r)fragment -> cbytes
private definition !e,r,s,d. Payload(Id(e),r,{frag = (e,s,d)}) = DataStream.Payload(e,s,r,d)

function val Extend: epoch * 'b * range * 'd -> 'e
private definition !e,s,r,f,e',s',d.
  f.frag = (e',s',d) =>
  Extend(e,s,r,f) = DataStream.ExtendStreamDelta(e,s,r,d)

// conversion with application-level deltas

predicate FragOfDelta of e:epoch * r:range * (;Id(e),r)fragment * s:(;e)stream * (;e,s,r)delta
private definition !e,r,f,s,d.
	FragOfDelta(e,r,f,s,d) <=> f = {frag = (e,s,d)}

ask !e,r,f,s,d. FragOfDelta(e,r,f,s,d) => Payload(Id(e),r,f) = DataStream.Payload(e,s,r,d)
ask !e,r,f,s,d. FragOfDelta(e,r,f,s,d) => Extend(e,s,r,f) = ExtendStreamDelta(e,s,r,d)

val fragment: e:epoch -> s:(;e) stream -> r:range ->
  d:(;e,s,r) delta ->
  f:(;Id(e),r) fragment * s':(;e) stream
  { Sent(e,s,r,f) /\ s' = Extend(e,s,r,f) /\ FragOfDelta(e,r,f,s,d)}

val delta: e:epoch -> s:(;e) stream -> r:range ->
  f:(;Id(e),r) fragment{Auth(e) => Sent(e,s,r,f)
						} ->
  d:(;e,s,r) delta * s':(;e) stream{s' = Extend(e,s,r,f) /\ FragOfDelta(e,r,f,s,d)}

// conditional fragment abstraction

val plain: i:id{not AuthId(i)} -> r:range ->
  b:(;r) rbytes -> f:(;i,r) fragment{B(b) = Payload(i,r,f)}

val repr:  i:id{not SafeId(i)} -> r:range ->
  f:(;i,r) fragment -> b:(;r) rbytes{B(b) = Payload(i,r,f)}

// We use this function for ideal decryption by table lookup,
// as the range after decryption is usually wider than the one used for encryption.
// (Note that by design the encryption ranges are *not* authenticated).

val widen: i:id -> r0:range -> f0:(;i,r0)fragment ->
    f1:(;i,RangeClass(i,r0))fragment{
    Payload(i,r0,f0) = Payload(i,RangeClass(i,r0),f1) /\
    !e,s. Sent(e,s,r0,f0) => Sent(e,s,RangeClass(i,r0),f1)}
