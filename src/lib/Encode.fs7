(*
 * Copyright (c) 2012--2013 MSR-INRIA Joint Center. All rights reserved.
 * 
 * This code is distributed under the terms for the CeCILL-B (version 1)
 * license.
 * 
 * You should have received a copy of the CeCILL-B (version 1) license
 * along with this program.  If not, see:
 * 
 *   http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt
 *)

module Encode

(* The "plain" file for CPA encryption (module ENC) *)
(* provided by LHAE, implementing LHAEPlain @| MAC @| padding when using MtE *)

open Bytes
open Error
open TLSError
open TLSInfo
open TLSConstants
open Range

//------------------------------------------------------------------------------------------------------
// Interface towards ENC (abstract)
//------------------------------------------------------------------------------------------------------

// the result of decrypting & decoding, with an abstract type for secrecy
private type (;e:id,ad:(;e)LHAEPlain.adata,rg:range) plain =
	{ plain: (;e,ad,rg)LHAEPlain.plain;
	  tag  : (;e)MAC.tag;
	  ok   : b:bool { EncAlg(e) = Stream_RC4_128 => b = true }
	  (* true iff decoding succeeded; always true with RC4. *) }

function val PlainLength: id * nat -> nat
definition !e,tlen.
  tlen >= IVSize(e) =>
  PlainLength(e,tlen) = tlen - IVSize(e)

ask !e,tlen,mac.
     tlen >= 0 /\
     e.aeAlg = MACOnly(mac)  => PlainLength(e,tlen) = tlen

ask !e,tlen,mac.
     tlen >= 0 /\
     e.aeAlg = MtE(Stream_RC4_128,mac)  => PlainLength(e,tlen) = tlen

//------------------------------------------------------------------------------------------------------
// Interface towards LHAE
//------------------------------------------------------------------------------------------------------

private val zeros: r:range -> (;r)rbytes

val payload: e:id -> r:range -> ad:(;e)LHAEPlain.adata ->
  f:(;e,ad,r)LHAEPlain.plain ->
  b:(;r) rbytes{ SafeId(e) \/ B(b) = LHAEPlain.Payload(e,B(ad),r,f) }

// the MACed bytes, i.e. ad @| 2-byte length of payload @| payload

function val MACPlain : 'a * 'b * 'c * 'd -> 'e
private definition !e,r,ad,f. MACPlain(e,r,ad,f) = ad @| VLBytes(2,LHAEPlain.Payload(e,ad,r,f))
val macPlain: e:id -> r:range ->
  ad:(;e)LHAEPlain.adata ->
  f:(;e,ad,r)LHAEPlain.plain -> b:bytes{ SafeId(e) \/ B(b) = MACPlain(e,r,B(ad),f) }

predicate val Decoded: 'e * 'a * 'b -> bool

val mac: e:id -> k:(;e) MAC.key ->
  ad:(;e)LHAEPlain.adata -> rg:range ->
  p:(;e,ad,rg)LHAEPlain.plain ->
  (;e,ad,rg) plain

val verify: e:id -> k:(;e) MAC.key ->
  ad:(;e)LHAEPlain.adata ->
  rg:range ->
  ps:(;e,ad,rg) plain ->
  res:(;e,ad,rg)LHAEPlain.plain Result

predicate val Encoded: 'e * 'a * 'b * 'c * 'd -> bool

private val pad: l:int { 0 < l /\ l <= 256 } -> b:bytes{Length(b) = l}

// for typing decode
private ask !e,tlen.
  (((?alg,mac. e.aeAlg  = MtE(CBC_Stale(alg),mac)) \/
    (?alg,mac. e.aeAlg  = MtE(CBC_Fresh(alg),mac))) /\
  (tlen - IVSize(e) - MacKeySize(MacAlg(e)) - 1 > 255)) =>
  CipherRangeClass(e,tlen) =
  (tlen - IVSize(e) - MacKeySize(MacAlg(e)) - 1 - 255,
   tlen - IVSize(e) - MacKeySize(MacAlg(e)) - 1)

private ask !e,tlen.
  (((?alg,mac. e.aeAlg  = MtE(CBC_Stale(alg),mac)) \/
    (?alg,mac. e.aeAlg  = MtE(CBC_Fresh(alg),mac))) /\
  (tlen - IVSize(e) - MacKeySize(MacAlg(e)) - 1 >= 0) /\
  (tlen - IVSize(e) - MacKeySize(MacAlg(e)) - 1 <= 255)) =>
  CipherRangeClass(e,tlen) =
  (0,
   tlen - IVSize(e) - MacKeySize(MacAlg(e)) - 1)

val encode: e:id{not SafeId(e) /\ (?alg,mac. e.aeAlg  = MtE(CBC_Stale(alg),mac) \/
	  e.aeAlg  = MtE(CBC_Fresh(alg),mac))} ->
    tlen:nat{tlen <= max_TLSCipher_fragment_length} -> rg:range{tlen = TargetLength(e,rg)} ->
	ad:(;e) LHAEPlain.adata -> pl:(;e,ad,rg) LHAEPlain.plain -> tag:(;e) MAC.tag ->
	(;PlainLength(e,tlen))lbytes
val decode: e:id{not AuthId(e) /\ (?alg,mac. e.aeAlg  = MtE(CBC_Stale(alg),mac) \/
	  e.aeAlg  = MtE(CBC_Fresh(alg),mac))} ->
	ad:(;e) LHAEPlain.adata -> rg:range ->
	tlen:nat{tlen - IVSize(e) >= ( MacKeySize(MacAlg(e)) + 1) /\
	rg = CipherRangeClass(e,tlen)} ->
	(;PlainLength(e,tlen))lbytes ->
	ps:(;e,ad,rg)plain

private ask !e,tlen.
  (((?mac. e.aeAlg  = MACOnly(mac)) \/
   (?mac. e.aeAlg  = MtE(Stream_RC4_128,mac))) /\
  (tlen >= MacKeySize(MacAlg(e)))) =>
    CipherRangeClass(e,tlen) =
    (tlen - MacKeySize(MacAlg(e)),
     tlen - MacKeySize(MacAlg(e)))

val encodeNoPad: e:id{not SafeId(e) /\ (?mac. e.aeAlg  = MACOnly(mac) \/
	  e.aeAlg  = MtE(Stream_RC4_128,mac))} ->
	tlen:nat{tlen <= max_TLSCipher_fragment_length} -> rg:range{tlen = TargetLength(e,rg)} ->
	ad:(;e) LHAEPlain.adata -> (;e,ad,rg) LHAEPlain.plain -> (;e) MAC.tag ->
	(;PlainLength(e,tlen))lbytes
val decodeNoPad: e:id{not AuthId(e) /\ (?mac. e.aeAlg  = MACOnly(mac) \/
	  e.aeAlg  = MtE(Stream_RC4_128,mac))} ->
	ad:(;e) LHAEPlain.adata -> rg:range ->
	tlen:nat{tlen >= MacKeySize(MacAlg(e)) /\
	rg = CipherRangeClass(e,tlen)} -> (;PlainLength(e,tlen))lbytes ->
	(;e,ad,rg)plain

function val MinTlen: id -> nat
definition !id,mac.     id.aeAlg = MACOnly(mac)            => MinTlen(id) = MacKeySize(mac)
definition !id,mac.     id.aeAlg = MtE(Stream_RC4_128,mac) => MinTlen(id) = MacKeySize(mac)
definition !id,alg,mac. id.aeAlg = MtE(CBC_Fresh(alg),mac) => MinTlen(id) = IVSize(id) + MacKeySize(mac) + 1
definition !id,alg,mac. id.aeAlg = MtE(CBC_Stale(alg),mac) => MinTlen(id) = IVSize(id) + MacKeySize(mac) + 1

val plain: e:id{not AuthId(e)} ->
  ad:(;e)LHAEPlain.adata -> tlen:nat{tlen <= max_TLSCipher_fragment_length /\ tlen >= MinTlen(e)} ->
  (;PlainLength(e,tlen))lbytes ->
  (;e,ad,CipherRangeClass(e,tlen)) plain

val repr:  e:id{not SafeId(e)} ->
  ad:(;e)LHAEPlain.adata -> rg:range ->
  (;e,ad,rg) plain ->
  (;PlainLength(e,TargetLength(e,rg)))lbytes{TargetLength(e,rg) <= max_TLSCipher_fragment_length}

//------------------------------------------------------------------------------------------------------
// Auxiliary definitions and assumptions for typing
//------------------------------------------------------------------------------------------------------

private definition !e,pl. MAC.Msg(e,pl) <=>
     (SafeId(e) \/ (?ad,r,f. Length(ad) = 8 + StatefulPlain.ADLength(e) /\
	  B(pl) = MACPlain(e,r,B(ad),f)))
