(*
 * Copyright (c) 2012--2013 MSR-INRIA Joint Center. All rights reserved.
 * 
 * This code is distributed under the terms for the CeCILL-B (version 1)
 * license.
 * 
 * You should have received a copy of the CeCILL-B (version 1) license
 * along with this program.  If not, see:
 * 
 *   http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt
 *)

module ENC

(* Bulk encryption for TLS record, agile & assumed conditionally CPA with "Encode" for plaintexts *)
(* This module is trusted *)

open Bytes
open Encode
open TLSInfo
open TLSConstants
open Error
open TLSError
open Range

// ciphers consist of one or more blocks of bytes.
type cipher = b:bytes{Length(b) <= max_TLSCipher_fragment_length}

private type (;ki:id) key = {k:bytes}

type iv = bytes
private type (;ki:id) iv3 =
	| SomeIV of iv // SSL_3p0 and TLS_1p0
	| NoIV         // TLS_1p0 and TLS_1p2

private type (;ki:id) blockState =
    {key: (;ki)key;
     iv: (;ki)iv3}
private type (;ki:id) streamState =
    {skey: (;ki)key; // Ghost: Only stored so that we can LEAK it
     sstate: CoreCiphers.rc4engine}

private type (;ki:id,rw:rw)state =
    | BlockCipher of (;ki)blockState
    | StreamCipher of (;ki)streamState

type (;ki:id)encryptor = (;ki,Writer)state
type (;ki:id)decryptor = (;ki,Reader)state

// We do not use the state, but an abstract ID over it, so that we can link
// encryptor and decryptor states
private function val StateID: ki:id * rw:rw * (;ki,rw)state -> int

val GEN:    ki:id -> (e:(;ki)encryptor{StateID(ki,Writer,e)=0}) * (d:(;ki)decryptor{StateID(ki,Reader,d)=0})
val LEAK:   ki:id{not SafeId(ki)} -> rw:rw -> (;ki,rw)state -> key:bytes * iv:bytes
val COERCE: ki:id{not SafeId(ki)} -> rw:rw -> key:bytes -> iv:bytes -> (;ki,rw)state

(* an abstract predicate recording all encryption results. *)
predicate val ENCrypted:
  (e:id * ad:(;e)LHAEPlain.adata * c:cipher * 'a) -> bool // p:(;e,ad,CipherRangeClass(e,Length(c))) plain

val ENC: ki:id -> s:(;ki) encryptor -> ad:(;ki)LHAEPlain.adata -> r:range ->
  p:(;ki,ad,r)plain ->
  ( (s': (;ki) encryptor{StateID(ki,Writer,s') = StateID(ki,Writer,s)+1}) *
    (c : cipher{(SafeId(ki) => ENCrypted(ki,ad,c,p)) /\ Length(c)=TargetLength(ki,r)}) )

val DEC: ki:id -> s:(;ki) decryptor -> ad:(;ki)LHAEPlain.adata ->
  c:cipher
  { (SafeId(ki) => ?p'. ENCrypted(ki,ad,c,p')) /\ Length(c) >= MinTlen(ki) } ->
  ( (s': (;ki) decryptor{StateID(ki,Reader,s') = StateID(ki,Reader,s)+1}) *
    (p : (;ki,ad,CipherRangeClass(ki,Length(c)))plain {!p'. ENCrypted(ki,ad,c,p') => p=p'}))

type entry =
  (ki:id * ad:(;ki)LHAEPlain.adata * c:cipher * p:(;ki,ad,CipherRangeClass(ki,Length(c)))plain)
  { ENCrypted(ki,ad,c,p) }

val log: entry list ref
val cfind: e:id -> c:cipher -> xs: entry list ->
	(ad:(;e)LHAEPlain.adata * rg:range * (;e,ad,rg) Encode.plain)

private val lastblock:  alg:blockCipher -> c:cipher {Length(c)>=BlockSize(alg)} -> bytes
