(*
 * Copyright (c) 2012--2014 MSR-INRIA Joint Center. All rights reserved.
 * 
 * This code is distributed under the terms for the CeCILL-B (version 1)
 * license.
 * 
 * You should have received a copy of the CeCILL-B (version 1) license
 * along with this program.  If not, see:
 * 
 *   http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt
 *)

module HMAC

(* Core HMAC algorithms; trusted only on their tag lengths *)

open Bytes
open TLSConstants

type key = bytes
type data = bytes
type mac = bytes

val ssl_pad1_md5:  bytes
val ssl_pad2_md5:  bytes
val ssl_pad1_sha1: bytes
val ssl_pad2_sha1: bytes

private val sslKeyedHashPads: hashAlg -> bytes * bytes
private val sslKeyedHash: hashAlg -> key -> data -> mac
private val sslKeyedHashVerify: hashAlg -> key -> data -> mac -> bool
private val HMAC: hashAlg -> key -> data -> mac
private val HMACVERIFY: hashAlg -> key -> data -> mac -> bool

val MAC:
  a:macAlg -> k:key {Length(k)=MacKeySize(a)} ->
  data -> t:mac {Length(t)=MacSize(a)}
val MACVERIFY:
  a:macAlg -> k:key {Length(k)=MacKeySize(a)} ->
  data -> t:mac {Length(k)=MacSize(a)} -> bool
